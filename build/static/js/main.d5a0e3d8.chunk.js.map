{"version":3,"sources":["videos/Europe.mov","videos/Antarctica.mov","videos/Australia.mov","EonChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EonChart","eon","pubnub","this","props","channels","history","generate","bindto","data","labels","type","react_default","a","createElement","id","React","Component","App","_this","Object","classCallCheck","_super","call","PubNub","publishKey","subscribeKey","state","urlArray","vidURL","wrapper_id","margin_left","overlay_text","chartType","channel","changeVideo","bind","assertThisInitialized","trigger","trigger2","_this2","Date","now","date","setInterval","setState","_this3","keyValue","_React$createElement","console","log","ReactPlayer_default","url","Europe","playing","Australia","Antarctica","defineProperty","_this4","className","style","position","display","width","height","top","left","right","bottom","paddingTop","fontWeight","fontSize","zIndex","cursor","color","marginLeft","src_EonChart","playVideo","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5a0e3d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Europe.904d8bf0.mov\";","module.exports = __webpack_public_path__ + \"static/media/Antarctica.8aec2fae.mov\";","module.exports = __webpack_public_path__ + \"static/media/Australia.566a071e.mov\";","import React from 'react';\nimport eon from 'eon-chart';\n\nclass EonChart extends React.Component{\n\n  componentDidMount(){\n    eon({\n      pubnub: this.props.pubnub,\n      channels: this.props.channels,\n      history: true,\n      generate: {\n        bindto: '#chart',\n        data: {\n          labels: this.props.labels || true,\n          type: this.props.type || 'line'\n        }\n      }\n    });\n    \n  }\n\n  render(){\n    return(\n      <div id=\"chart\"> </div>\n    );\n  }\n}\n\nexport default EonChart;","import React, { Component } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport PubNub from 'pubnub';\nimport EonChart from './EonChart.js';\nimport './App.css';\n\n\nimport Europe from \"./videos/Europe.mov\";\nimport Antarctica from \"./videos/Antarctica.mov\";\nimport Australia from \"./videos/Australia.mov\";\n\nlet urlArray = [\n  \"https://www.youtube.com/watch?v=uXdrKz4CBD8&t=12s\",\n  \"http://localhost:3000/public/videos/Antarctica.mov\",\n  \"http://localhost:3000/public/videos/Australia.mov\",\n  \"http://localhost:3000/public/videos/Europe.mov\",\n];\n\n//let vid;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n\n    this.pubnub = new PubNub({\n        publishKey: 'pub-c-c4baa104-97d7-4d3c-a403-1f04295d861e',\n        subscribeKey: 'sub-c-b4e92c8e-639d-11ea-b5f8-9a833ea0503a'\n      });\n\n\n    this.state = {\n      urlArray: [\n        \"https://www.youtube.com/watch?v=uXdrKz4CBD8&t=12s\",\n        \"http://localhost:3000/public/videos/Antarctica.mov\",\n        \"http://localhost:3000/public/videos/Australia.mov\",\n        \"http://localhost:3000/public/videos/Europe.mov\",\n      ],\n      // vidURL: \"https://www.youtube.com/watch?v=0hvQvrCpi8w\",\n      vidURL: \"http://localhost:3000/public/videos/Europe.mov\",\n      wrapper_id: \"overlay\",\n      margin_left: \"30px\",\n      overlay_text: \"Overlay Text 1\",\n\n      chartType: 'spline',\n      pubnub: this.pubnub,\n      channel: 'ioechannel'\n    };\n    // this.playVideo = this.playVideo.bind(this);\n    this.changeVideo = this.changeVideo.bind(this);\n    this.trigger();\n    this.trigger2();\n  }\n\n  trigger() {\n    let newTime = Date.now() - this.props.date;\n    setInterval(() => {\n      this.setState({\n        margin_left: \"30px\",\n        overlay_text: \"New Overlay Text\",\n      });\n    }, 5000);\n  }\n\n  trigger2() {\n    setInterval(() => {\n      this.setState({\n        overlay_text: \"New Overlay Text 3\",\n        margin_left: \"400px\",\n      });\n    }, 10000);\n  }\n\n  changeVideo(keyValue) {\n    this.setState({\n      vidURL: \"http://localhost:3000/public/videos/Australia.mov\",\n    });\n    //    this.setState({ vidURL: keyValue.keyCode });\n  }\n\n  playVideo() {\n    switch (this.state.vidURL) {\n      case 68:\n        console.log(\"d\");\n        return <ReactPlayer url={Europe} playing />;\n\n      case 70:\n        console.log(\"f\");\n        return <ReactPlayer url={Australia} playing />;\n\n      case 71:\n        console.log(\"g\");\n        return <ReactPlayer url={Antarctica} playing />;\n\n      default:\n        console.log(this.state.vidURL);\n        return (\n          <ReactPlayer\n            url=\"http://localhost:3000/public/videos/Europe.mov\"\n            url=\"https://www.youtube.com/watch?v=uXdrKz4CBD8&t=13s\"\n            playing\n          />\n\n          /*  <ReactPlayer\n            className='player-wrapper'\n            url= {video}\n            controls = {true}\n            playing\n            />*/\n        );\n    }\n  }\n\n  render() {\n    const mystyle = {\n      position: \"fixed\",\n      display: \"block\",\n      width: \"200px;\",\n      height: \"00px\",\n      top: \"0\",\n      left: \"0\",\n      right: \"0\",\n      bottom: \"0\",\n      paddingTop: \"50px\",\n      fontWeight: \"bold\",\n      fontSize: \"22px\",\n\n      //marginLeft: {this.state.margin_left},\n      //  backgroundColor: rgba(0,0,0,0.5),\n      zIndex: \"2\",\n      cursor: \"pointer\",\n      color: \"orange\",\n    };\n    console.log(this.state.vidURL);\n\n    //{this.playVideo}\n\n    return (\n      <div className=\"App\">\n        <div id={this.state.wrapper_id} style={mystyle}>\n          <div style={{ marginLeft: this.state.margin_left }}>\n            {this.state.overlay_text}\n          </div>\n        </div>\n\n        <EonChart\n            pubnub={this.state.pubnub}\n            channels={[this.state.channel]}\n            type={this.state.chartType} />\n            console.log(pubnub);\n\n        {this.playVideo()}\n        <button\n          onClick={() =>\n            this.setState({ vidURL: 71, overlay_text: \"Antarctica\" })\n          }\n        >\n          Antarctica\n        </button>\n        <button\n          onClick={() => this.setState({ vidURL: 68, overlay_text: \"Europe\" })}\n        >\n          Europe\n        </button>\n        <button\n          onClick={() =>\n            this.setState({ vidURL: 70, overlay_text: \"Austraila\" })\n          }\n        >\n          Austraila\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}